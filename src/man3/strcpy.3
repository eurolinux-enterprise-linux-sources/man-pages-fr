.\" Copyright (C) 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 18:06:49 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified Fri Aug 25 23:17:51 1995 by Andries Brouwer (aeb@cwi.nl)
.\" Modified Wed Dec 18 00:47:18 1996 by Andries Brouwer (aeb@cwi.nl)
.\" 2007-06-15, Marc Boyer <marc.boyer@enseeiht.fr> + mtk
.\"     Improve discussion of strncpy().
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH STRCPY 3 "1er juin 2009" GNU "Manuel du programmeur Linux"
.SH NOM
strcpy, strncpy \- Copier une chaîne.
.SH SYNOPSIS
.nf
\fB#include <string.h>\fP
.sp
\fBchar *strcpy(char *\fP\fIdest\fP\fB, const char *\fP\fIsrc\fP\fB);\fP
.sp
\fBchar *strncpy(char *\fP\fIdest\fP\fB, const char *\fP\fIsrc\fP\fB, size_t \fP\fIn\fP\fB);\fP
.fi
.SH DESCRIPTION
La fonction \fBstrcpy\fP() copie la chaîne pointée par \fIsrc\fP, y compris le
caractère nul («\ \e0\ ») final dans la chaîne pointée par \fIdest\fP. Les deux
chaînes ne doivent pas se chevaucher. La chaîne \fIdest\fP doit être assez
grande pour accueillir la copie.
.PP
La fonction \fBstrncpy\fP() est identique, sauf qu'au plus \fIn\fP octets de
\fIsrc\fP sont copiés. \fBAttention\fP\ : s'il n'y a pas de caractère nul dans les
\fIn\fP premiers octets de \fIsrc\fP, la chaîne résultante dans \fIdest\fP ne
disposera pas de caractère nul final.
.PP
Si la longueur de \fIsrc\fP est inférieure à \fIn\fP, \fBstrncpy\fP() remplit la fin
de \fIdest\fP avec des caractères nuls.
.PP
Une implémentation simple de \fBstrncpy\fP() pourrait être\ :
.in +4n
.nf

char*
strncpy(char *dest, const char *src, size_t n){
    size_t i;

    for (i = 0 ; i < n && src[i] != \(aq\e0\(aq ; i++)
        dest[i] = src[i];
    for ( ; i < n ; i++)
        dest[i] = \(aq\e0\(aq;

    return dest;
}
.fi
.in
.SH "VALEUR RENVOYÉE"
Les fonctions \fBstrcpy\fP() et \fBstrncpy\fP() renvoient un pointeur sur la
chaîne destination \fIdest\fP.
.SH CONFORMITÉ
SVr4, BSD\ 4.3, C89, C99.
.SH NOTES
Certains programmeurs considèrent \fBstrncpy\fP() comme inefficace et propice
aux erreurs. Si le programmeur sait (c'est\-à\-dire en ajoutant du code pour
effectuer le test\ !) que la taille de \fIdest\fP est supérieure à la longueur
de \fIsrc\fP, alors \fBstrcpy\fP() peut être utilisée.

S'il n'y a pas d'octet nul de fin dans les \fIn\fP premiers caractères de
\fIsrc\fP, \fBstrncpy\fP() produit une chaîne non terminée dans \fIdest\fP. Les
programmeurs évitent souvent cette erreur en forçant la fin de chaîne de
cette façon\ :
.in +4n
.nf

strncpy(buf, str, n);
if (n > 0)
    buf[n \- 1]= \(aq\e0\(aq;
.fi
.in
.SH BOGUES
Si la chaîne de destination d'un \fBstrcpy\fP() n'est pas suffisamment grande,
n'importe quoi peut survenir. Un dépassement de tampon pour une chaîne de
taille fixe est la technique favorite de pirates pour prendre le contrôle
d'une machine. À chaque fois qu'un programme lit ou copie des données dans
un tampon, le programme doit d'abord vérifier qu'il y a suffisamment de
place. Ça peut ne pas être nécessaire si vous pouvez montrer qu'un
dépassement est impossible, mais faites attention\ : les programmes changes
au cours du temps, et ce qui était impossible peut devenir possible.
.SH "VOIR AUSSI"
\fBbcopy\fP(3), \fBmemccpy\fP(3), \fBmemcpy\fP(3), \fBmemmove\fP(3), \fBstrpcpy\fP(3),
\fBwcscpy\fP(3), \fBwcsncpy\fP(3)
.SH COLOPHON
Cette page fait partie de la publication 3.23 du projet \fIman\-pages\fP
Linux. Une description du projet et des instructions pour signaler des
anomalies peuvent être trouvées à l'adresse
<URL:http://www.kernel.org/doc/man\-pages/>.
.SH TRADUCTION
Depuis 2010, cette traduction est maintenue à l'aide de l'outil
po4a <URL:http://po4a.alioth.debian.org/> par l'équipe de
traduction francophone au sein du projet perkamon
<URL:http://alioth.debian.org/projects/perkamon/>.
.PP
Christophe Blaess <URL:http://www.blaess.fr/christophe/> (1996-2003),
Alain Portal <URL:http://manpagesfr.free.fr/> (2003-2006).
Nicolas François et l'équipe francophone de traduction de Debian\ (2006-2009).
.PP
Veuillez signaler toute erreur de traduction en écrivant à
<perkamon\-l10n\-fr@lists.alioth.debian.org>.
.PP
Vous pouvez toujours avoir accès à la version anglaise de ce document en
utilisant la commande
«\ \fBLC_ALL=C\ man\fR \fI<section>\fR\ \fI<page_de_man>\fR\ ».
