.\" Copyright (c) 2000 Andries Brouwer (aeb@cwi.nl)
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" 2000-08-14 added GNU additions from Andreas Jaeger
.\" 2000-12-05 some changes inspired by acahalan's remarks
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH FENV 3 "11 août 2008" Linux "Manuel du programmeur Linux"
.SH NOM
feclearexcept, fegetexceptflag, feraiseexcept, fesetexceptflag,
fetestexcept, fegetenv, fegetround, feholdexcept, fesetround, fesetenv,
feupdateenv, feenableexcept, fedisableexcept, fegetexcept \- Gestion des
exceptions et des arrondis des nombres flottants
.SH SYNOPSIS
.nf
\fB#include <fenv.h>\fP
.sp
\fBint feclearexcept(int \fP\fIexcepts\fP\fB);\fP
.br
\fBint fegetexceptflag(fexcept_t *\fP\fIflagp\fP\fB, int \fP\fIexcepts\fP\fB);\fP
.br
\fBint feraiseexcept(int \fP\fIexcepts\fP\fB);\fP
.br
\fBint fesetexceptflag(const fexcept_t *\fP\fIflagp\fP\fB, int \fP\fIexcepts\fP\fB);\fP
.br
\fBint fetestexcept(int \fP\fIexcepts\fP\fB);\fP
.sp
\fBint fegetround(void);\fP
.br
\fBint fesetround(int \fP\fIrounding_mode\fP\fB);\fP
.sp
\fBint fegetenv(fenv_t *\fP\fIenvp\fP\fB);\fP
.br
\fBint feholdexcept(fenv_t *\fP\fIenvp\fP\fB);\fP
.br
\fBint fesetenv(const fenv_t *\fP\fIenvp\fP\fB);\fP
.br
\fBint feupdateenv(const fenv_t *\fP\fIenvp\fP\fB);\fP
.fi
.sp
Effectuez l'édition des liens avec l'option \fI\-lm\fP.
.SH DESCRIPTION
Ces onze fonctions ont été définies dans la norme C99, et décrivent la
gestion des arrondis des nombres flottants et des exceptions (débordement,
division par zéro, etc.) sur les nombres flottants.
.SS Exceptions
L'exception \fIdivide\-by\-zero\fP (division par zéro) se produit quand une
opération sur des nombres finis donne un résultat infini.
.LP
L'exception \fIoverflow\fP (débordement) se produit quand un résultat doit être
représenté par un nombre flottant, mais que sa valeur absolue est trop
grande pour être représentée par un nombre flottant.
.LP
L'exception \fIunderflow\fP se produit quand un résultat doit être représenté
par un nombre flottant, mais que sa valeur absolue est trop petite pour être
représentée en nombre flottant.
.LP
L'exception \fIinexact\fP se produit quand le résultat arrondi d'une opération
n'est pas égal au résultat en précision infinie. Elle peut se déclencher
quand les exceptions \fIoverflow\fP ou \fIunderflow\fP se produisent.
.LP
L'exception \fIinvalid\fP se produit quand il n'y a pas de résultat bien défini
pour une opération, comme «\ 0/0\ » ou «\ infini\-infini\ » ou «\ sqrt(\-1)\
».
.SS "Gestion des exceptions"
Les exceptions sont représentées de deux manières\ : en tant qu'un unique
bit (exception présente ou absente), et ces bits correspondent, de manière
dépendante à l'implémentation, avec une position au sein d'un entier, et
aussi en tant que structure opaque pouvant contenir plus d'informations
concernant l'exception (éventuellement l'adresse du code déclenchant
l'erreur).
.LP
Chacune des macros \fBFE_DIVBYZERO\fP, \fBFE_INEXACT\fP, \fBFE_INVALID\fP,
\fBFE_OVERFLOW\fP, \fBFE_UNDERFLOW\fP est définie lorsque l'implémentation gère
l'exception correspondante. Les bits sont alors définis, ainsi on peut
appeler, par exemple, les fonctions de gestion des exceptions avec un
argument entier \fBFE_OVERFLOW\fP|\fBFE_UNDERFLOW\fP. D'autres exceptions peuvent
être supportées. La macro \fBFE_ALL_EXCEPT\fP est un masque au format OU
binaire correspondant à toutes les exceptions supportées.
.PP
La fonction \fBfeclearexcept\fP() efface les exceptions supportées représentées
par les bits de son argument.
.LP
La fonction \fBfegetexceptflag\fP() stocke une représentation de l'état des
exceptions contenues dans son argument \fIexcepts\fP dans l'objet opaque
\fI*flagp\fP.
.LP
La fonction \fBferaiseexcept\fP() déclenche les exceptions supportées,
représentées par les bits de son argument \fIexcepts\fP.
.LP
La fonction \fBfesetexceptflag\fP() fixe l'état des exceptions représentées par
l'argument \fIexcepts\fP à la valeur \fI*flagp\fP. Cette valeur doit être le
résultat d'un appel préalable à \fBfegetexceptflag\fP() avec un dernier
argument contenant tous les bits dans \fIexcepts\fP.
.LP
La fonction \fBfetestexcept\fP() renvoie un mot dont les bits définis sont
également les bits définis dans l'argument \fIexcepts\fP et pour lesquels
l'exception correspondante est définie.
.SS "Mode d'arrondis"
Le mode d'arrondi détermine comment le résultat des opérations en virgule
flottante doit être traité quand le résultat ne peut pas être représenté
exactement avec le «\ significand\ » (la précision). Plusieurs modes
d'arrondis peuvent être fournis\ : arrondis au plus proche (le mode par
défaut), arrondi vers le haut (vers l'infini positif), arrondi vers le bas
(vers l'infini négatif) et l'arrondi vers zéro.

Chacune des macros \fBFE_TONEAREST\fP, \fBFE_UPWARD\fP, \fBFE_DOWNWARD\fP et
\fBFE_TOWARDZERO\fP est définie lorsque l'implémentation gère la définition et
la lecture de la direction d'arrondi correspondante.
.LP
La fonction \fBfegetround\fP() renvoie la macro correspondant au mode d'arrondi
en cours.
.LP
La fonction \fBfesetround\fP() définit le mode d'arrondi tel qu'il est spécifié
par son argument et renvoie zéro en cas de succès.

C99 et POSIX.1\-2008 spécifient un identifiant, \fBFLT_ROUNDS\fP, défini dans
\fI<float.h>\fP, qui indique le mode d'arrondis de l'implémentation
pour les additions en virgule flottante. Cet identifiant peut prendre une
des valeurs suivantes\ :
.IP \-1
Le mode d'arrondi est indéterminé.
.IP 0
L'arrondi se fait vers 0.
.IP 1
L'arrondi se fait vers le plus proche nombre.
.IP 2
L'arrondi se fait vers l'infini positive.
.IP 3
L'arrondi se fait vers l'infini négatif.
.PP
Les autres valeurs sont dépendantes des machines, et ne sont pas des modes
d'arrondi standard.
.PP
La valeur de \fBFLT_ROUNDS\fP devrait refléter le mode d'arrondis en cours tel
qu'il est configuré par \fBfesetround\fP() (mais consultez la section BOGUES).
.SS "Environnement en virgule flottante"
L'environnement de travail en virgule flottante, y compris les modes de
contrôle et les drapeaux d'état peuvent être manipulés sous forme d'un objet
opaque de type \fIfenv_t\fP. L'environnement par défaut, est représenté par
\fBFE_DFL_ENV\fP (de type \fIconst fenv_t *\fP). Il s'agit de la configuration de
l'environnement au démarrage d'un programme, et elle est définie par ISO C
comme ayant un arrondi au plus proche, toutes les exceptions effacées et un
mode sans arrêt (continuer en présence des exceptions).
.LP
La fonction \fBfegetenv\fP() sauve l'environnement de travail en cours en
virgule flottante dans l'objet \fI*envp\fP.
.LP
La fonction \fBfeholdexcept\fP() effectue la même chose, puis efface tous les
drapeaux d'exceptions, et bascule si possible sur un mode sans arrêt
(continuer en présence des exceptions). Elle renvoie zéro en cas de succès.
.LP
La fonction \fBfesetenv\fP() recharge l'environnement de travail en virgule
flottante à partir de l'objet \fI*envp\fP. Cet objet doit être valide,
c'est\-à\-dire être le résultat d'un appel à \fBfegetenv\fP(), de
\fBfeholdexcept\fP() ou égal à \fBFE_DFL_ENV\fP. Cet appel ne déclenche pas
d'exception.
.LP
La fonction \fBfeupdateenv\fP() installe l'environnement en virgule flottante
représenté par l'objet \fI*envp\fP, sauf que les exceptions déjà déclenchées ne
sont pas effacées. Après l'appel de cette fonction, les exceptions
déclenchées seront un OU binaire entre l'ensemble précédent, et celui
contenu dans \fI*envp\fP. Comme précédemment, l'objet  \fI*envp\fP doit être
valide.
.SH "VALEUR RENVOYÉE"
.\" Earlier seven of these functions were listed as returning void.
.\" This was corrected in Corrigendum 1 (ISO/IEC 9899:1999/Cor.1:2001(E))
.\" of the C99 Standard.
Ces fonctions renvoient 0 en cas de succès et une valeur non nulle en cas
d'erreur.
.SH VERSIONS
Ces fonctions ont été introduites dans la glibc dans sa version\ 2.1.
.SH CONFORMITÉ
IEC 60559 (IEC 559:1989), ANSI/IEEE 854, C99, POSIX.1\-2001.
.SH NOTES
.SS "Notes sur la glibc"
Si possible, la bibliothèque GNU C définit une macro \fBFE_NOMASK_ENV\fP qui
représente un environnement lorsque toutes les exceptions déclenchées
entraîne une interception. La présence de cette macro peut être testée en
utilisant \fB#ifdef\fP. Elle n'est définie que si la constante symbolique
\fB_GNU_SOURCE\fP est définie. Le standard C99 ne définit pas comment
positionner les bits individuels dans le masque de virgule flottante, par
exemple pour intercepter des drapeaux particuliers. La glibc\ 2.2 gère
\fBfeenableexcept\fP() et \fBfedisableexcept\fP() pour définir individuellement
des interceptions, et \fBfegetexcept\fP() pour demander l'état.
.sp
.nf
\fB#define _GNU_SOURCE\fP
.br
\fB#include <fenv.h>\fP
.sp
\fBint feenableexcept(int \fP\fIexcepts\fP\fB);\fP
.br
\fBint fedisableexcept(int \fP\fIexcepts\fP\fB);\fP
.br
\fBint fegetexcept(void);\fP
.br
.fi
.LP
Les fonctions \fBfeenableexcept\fP() et \fBfedisableexcept\fP() activent
(désactivent) les interceptions pour chaque exception représentée par
\fIexcepts\fP et renvoient l'ensemble précédent des exceptions activées
lorsqu'elles réussissent, et \-1 sinon. La fonction \fBfegetexcept\fP() renvoie
l'ensemble des exceptions actuellement activées.
.SH BOGUES
.\" Aug 08, glibc 2.8
.\" See http://gcc.gnu.org/ml/gcc/2002-02/msg01535.html
C99 spécifie que la valeur de \fBFLT_ROUNDS\fP devrait refléter les changements
du mode d'arrondis en cours, tels qu'ils sont demandés par
\fBfesetround\fP(). Actuellement, ce n'est pas le cas\ : \fBFLT_ROUNDS\fP prend
toujours la valeur 1.
.SH "VOIR AUSSI"
\fBfeature_test_macros\fP(7), \fBmath_error\fP(7)
.SH COLOPHON
Cette page fait partie de la publication 3.23 du projet \fIman\-pages\fP
Linux. Une description du projet et des instructions pour signaler des
anomalies peuvent être trouvées à l'adresse
<URL:http://www.kernel.org/doc/man\-pages/>.
.SH TRADUCTION
Depuis 2010, cette traduction est maintenue à l'aide de l'outil
po4a <URL:http://po4a.alioth.debian.org/> par l'équipe de
traduction francophone au sein du projet perkamon
<URL:http://alioth.debian.org/projects/perkamon/>.
.PP
Christophe Blaess <URL:http://www.blaess.fr/christophe/> (1996-2003),
Alain Portal <URL:http://manpagesfr.free.fr/> (2003-2006).
Florentin Duneau et l'équipe francophone de traduction de Debian\ (2006-2009).
.PP
Veuillez signaler toute erreur de traduction en écrivant à
<perkamon\-l10n\-fr@lists.alioth.debian.org>.
.PP
Vous pouvez toujours avoir accès à la version anglaise de ce document en
utilisant la commande
«\ \fBLC_ALL=C\ man\fR \fI<section>\fR\ \fI<page_de_man>\fR\ ».
