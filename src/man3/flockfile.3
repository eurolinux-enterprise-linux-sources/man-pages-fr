.\" Copyright (C) 2001 Andries Brouwer <aeb@cwi.nl>.
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH FLOCKFILE 3 "29 août 2008" "" "Manuel du programmeur Linux"
.SH NOM
flockfile, ftrylockfile, funlockfile \- Verrouiller un flux FILE pour stdio
.SH SYNOPSIS
.nf
\fB#include <stdio.h>\fP
.sp
\fBvoid flockfile(FILE *\fP\fIfilehandle\fP\fB);\fP
.br
\fBint ftrylockfile(FILE *\fP\fIfilehandle\fP\fB);\fP
.br
\fBvoid funlockfile(FILE *\fP\fIfilehandle\fP\fB);\fP
.fi
.sp
.in -4n
Exigences de macros de test de fonctionnalités pour la glibc (consultez
\fBfeature_test_macros\fP(7))\ :
.in
.ad l
.sp
Pour toutes les fonctions ci\-dessus\ :
.RS 4
_POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _BSD_SOURCE || _SVID_SOURCE
|| _POSIX_SOURCE
.RE
.ad b
.SH DESCRIPTION
Les fonctions stdio peuvent être utilisées dans un contexte
multithread. Ceci est réalisé en affectant à chaque objet de type \fIFILE\fP un
«\ compteur de verrouillage\ » et (si le «\ compteur de verrouillage\ » est
non nul) un thread propriétaire. Lors de chaque appel à la bibliothèque, ces
fonctions attendent jusqu'à ce que l'objet \fIFILE\fP ne soit plus verrouillé
par un thread différent, puis elles le verrouillent, réalisent les
entrées/sorties demandées, et libèrent l'objet.
.LP
(Remarque\ : ce verrouillage n'a rien à voir avec le verrouillage de fichier
réalisé par des fonctions comme \fBflock\fP(2) et \fBlockf\fP(3).)
.LP
Tout ceci est invisible au programmeur en C, mais il existe deux raisons de
souhaiter un contrôle plus fin. D'une part, un thread peut réaliser une
série d'entrées/sorties interdépendantes, ces opérations ne devant pas être
interrompues par les entrées/sorties d'autres threads. D'autre part, on peut
désirer supprimer la surcharge induite par ce verrouillage afin d'obtenir de
meilleures performances.
.LP
À cette fin, un thread peut verrouiller explicitement un objet de type
\fIFILE\fP, puis réaliser sa série d'entrées/sorties, et enfin, relâcher le
verrou. Cela empêche les autres threads d'intervenir sur le flux. Si la
motivation du verrouillage est la recherche de meilleures performances, on
peut réaliser l'entrée/sortie à l'aide des versions non bloquantes des
fonctions stdio\ : avec \fBgetc_unlocked\fP(3) et \fBputc_unlocked\fP(3) au lieu
de \fBgetc\fP(3) et \fBputc\fP(3).
.LP
La fonction \fBflockfile\fP() attend jusqu'à ce que \fI*filehandle\fP ne soit plus
verrouillé par un autre thread, puis affecte \fI*filehandle\fP au thread
actuel, et incrémente le «\ compteur de verrouillage\ ».
.LP
La fonction \fBfunlockfile\fP() décrémente le «\ compteur de verrouillage\ ».
.LP
La fonction \fBftrylockfile\fP() est une version non bloquante de
\fBflockfile\fP(). Elle ne fait rien lorsqu'un autre thread est propriétaire de
\fI*filehandle\fP, sinon, elle se l'approprie et incrémente le «\ compteur de
verrouillage\ ».
.SH "VALEUR RENVOYÉE"
La fonction \fBftrylockfile\fP() renvoie zéro en cas de succès (le verrou a été
obtenu), et une valeur non nulle en cas d'échec.
.SH ERREURS
Aucune.
.SH CONFORMITÉ
POSIX.1\-2001.
.SH DISPONIBILITÉ
Ces fonctions sont disponibles lorsque \fB_POSIX_THREAD_SAFE_FUNCTIONS\fP est
défini. Elles sont présentes dans la libc depuis la version\ 5.1.1 et dans
la glibc depuis la version\ 2.0.
.SH "VOIR AUSSI"
\fBunlocked_stdio\fP(3)
.SH COLOPHON
Cette page fait partie de la publication 3.52 du projet \fIman\-pages\fP
Linux. Une description du projet et des instructions pour signaler des
anomalies peuvent être trouvées à l'adresse
\%http://www.kernel.org/doc/man\-pages/.
.SH TRADUCTION
Depuis 2010, cette traduction est maintenue à l'aide de l'outil
po4a <http://po4a.alioth.debian.org/> par l'équipe de
traduction francophone au sein du projet perkamon
<http://perkamon.alioth.debian.org/>.
.PP
Stéphan Rafin (2002),
Alain Portal <http://manpagesfr.free.fr/>\ (2006).
Florentin Duneau et l'équipe francophone de traduction de Debian\ (2006-2009).
.PP
Veuillez signaler toute erreur de traduction en écrivant à
<perkamon\-fr@traduc.org>.
.PP
Vous pouvez toujours avoir accès à la version anglaise de ce document en
utilisant la commande
«\ \fBLC_ALL=C\ man\fR \fI<section>\fR\ \fI<page_de_man>\fR\ ».
