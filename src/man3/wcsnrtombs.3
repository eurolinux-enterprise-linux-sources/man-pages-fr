.\" Copyright (c) Bruno Haible <haible@clisp.cons.org>
.\"
.\" %%%LICENSE_START(GPLv2+_DOC_ONEPARA)
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\" %%%LICENSE_END
.\"
.\" References consulted:
.\"   GNU glibc-2 source code and manual
.\"   Dinkumware C library reference http://www.dinkumware.com/
.\"   OpenGroup's Single UNIX specification http://www.UNIX-systems.org/online.html
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH WCSNRTOMBS 3 "16 octobre 2011" GNU "Manuel du programmeur Linux"
.SH NOM
wcsnrtombs \- Convertir une chaîne de caractères larges en séquence
multioctet
.SH SYNOPSIS
.nf
\fB#include <wchar.h>\fP
.sp
\fBsize_t wcsnrtombs(char *\fP\fIdest\fP\fB, const wchar_t **\fP\fIsrc\fP\fB, size_t \fP\fInwc\fP\fB,\fP
\fB                  size_t \fP\fIlen\fP\fB, mbstate_t *\fP\fIps\fP\fB);\fP
.fi
.sp
.in -4n
Exigences de macros de test de fonctionnalités pour la glibc (consultez
\fBfeature_test_macros\fP(7))\ :
.in
.sp
\fBwcsnrtombs\fP()\ :
.PD 0
.ad l
.RS 4
.TP  4
Depuis la glibc 2.10\ :
_XOPEN_SOURCE\ >=\ 700 || _POSIX_C_SOURCE\ >=\ 200809L
.TP 
Avant la glibc 2.10\ :
_GNU_SOURCE
.RE
.ad
.PD
.SH DESCRIPTION
La fonction \fBwcsnrtombs\fP() est l'équivalent de \fBwcsrtombs\fP(3), sauf que le
nombre de caractères larges à convertir est limité (à \fInwc\fP), en commençant
en \fI*src\fP.
.PP
Si \fIdest\fP n'est pas un pointeur NULL, la fonction \fBwcsnrtombs\fP() convertit
au maximum \fInwc\fP caractères larges depuis la chaîne \fI*src\fP vers la
séquence multioctet située en \fIdest\fP. Au plus \fIlen\fP octets seront écrits
dans \fIdest\fP. L'état de conversion \fI*ps\fP est mis à jour. La conversion est
réalisée en fait en invoquant à répétition \fIwcrtomb(dest,*src,ps)\fP, aussi
longtemps que cet appel réussit, en augmentant à chaque fois \fIdest\fP du
nombre d'octets écrits, et en incrémentant \fI*src\fP de 1. La conversion peut
se terminer pour trois raisons\ :
.IP 1. 3
Un caractère large que l'on ne peut pas représenter par une séquence
multioctet (dans la locale utilisée) a été rencontré. Dans ce cas \fI*src\fP
pointera sur le caractère invalide, et la fonction renverra \fI(size_t)\ \-1\fP
après avoir placé \fBEILSEQ\fP dans \fIerrno\fP.
.IP 2.
On a converti \fInwc\fP caractères larges sans rencontrer de caractère large
nul (L\(aq\e0\(aq), ou la limite \fIlen\fP est atteinte. Dans ce cas, \fI*src\fP
pointera sur le caractère suivant à convertir, et la fonction renvoie le
nombre d'octets écrits dans \fIdest\fP.
.IP 3.
La chaîne de caractères larges a été complètement convertie, y compris le
caractère large nul final (ramenant \fI*ps\fP à l'état initial). Dans ce cas,
\fI*src\fP devient NULL, et la fonction renvoie le nombre d'octets écrits dans
\fIdest\fP, sans compter l'octet nul («\ \e0\ ») final.
.PP
Si \fIdest\fP est NULL, la longueur \fIlen\fP est ignorée, et la conversion se
déroule comme précédemment, sauf que les octets convertis ne sont pas écrits
en mémoire, et qu'il n'y a pas de limite de longueur en destination.
.PP
Dans tous les cas, si \fIps\fP est un pointeur NULL, un état anonyme statique,
réservé à la fonction \fBwcsnrtombs\fP() est utilisé à sa place.
.PP
Le programmeur doit s'assurer qu'il y a assez de place pour au moins \fIlen\fP
octets au minimum dans \fIdest\fP.
.SH "VALEUR RENVOYÉE"
La fonction \fBwcsnrtombs\fP() renvoie le nombre d'octets constituant la partie
convertie de la séquence multioctet, sans compter l'octet nul final. Si elle
rencontre un caractère large qu'elle ne peut convertir, elle renvoie
\fI(size_t)\ \-1\fP et place \fBEILSEQ\fP dans \fIerrno\fP.
.SH CONFORMITÉ
POSIX.1\-2008.
.SH NOTES
Le comportement de \fBwcsnrtombs\fP() dépend de la catégorie \fBLC_CTYPE\fP de la
locale utilisée.
.PP
L'utilisation d'un pointeur NULL pour \fIps\fP n'est pas sûre dans un contexte
multithread.
.SH "VOIR AUSSI"
\fBiconv\fP(3), \fBwcsrtombs\fP(3)
.SH COLOPHON
Cette page fait partie de la publication 3.52 du projet \fIman\-pages\fP
Linux. Une description du projet et des instructions pour signaler des
anomalies peuvent être trouvées à l'adresse
\%http://www.kernel.org/doc/man\-pages/.
.SH TRADUCTION
Depuis 2010, cette traduction est maintenue à l'aide de l'outil
po4a <http://po4a.alioth.debian.org/> par l'équipe de
traduction francophone au sein du projet perkamon
<http://perkamon.alioth.debian.org/>.
.PP
Christophe Blaess <http://www.blaess.fr/christophe/> (1996-2003),
Alain Portal <http://manpagesfr.free.fr/> (2003-2006).
Nicolas François et l'équipe francophone de traduction de Debian\ (2006-2009).
.PP
Veuillez signaler toute erreur de traduction en écrivant à
<perkamon\-fr@traduc.org>.
.PP
Vous pouvez toujours avoir accès à la version anglaise de ce document en
utilisant la commande
«\ \fBLC_ALL=C\ man\fR \fI<section>\fR\ \fI<page_de_man>\fR\ ».
