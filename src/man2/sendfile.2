.\" This man page is Copyright (C) 1998 Pawel Krawczyk.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" $Id: sendfile.2,v 1.5 1999/05/18 11:54:11 freitag Exp $
.\" 2000-11-19 bert hubert <ahu@ds9a.nl>: in_fd cannot be socket
.\"
.\" 2004-12-17, mtk
.\"	updated description of in_fd and out_fd for 2.6
.\"	Various wording and formatting changes
.\"
.\" 2005-03-31 Martin Pool <mbp@sourcefrog.net> mmap() improvements
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SENDFILE 2 "17 décembre 2004" Linux "Manuel du programmeur Linux"
.SH NOM
sendfile \- Transfert de données entre descripteurs de fichier
.SH SYNOPSIS
\fB#include <sys/sendfile.h>\fP
.sp
.\" The below is too ugly. Comments about glibc versions belong
.\" in the notes, not in the header.
.\"
.\" .B #include <features.h>
.\" .br
.\" .B #if (__GLIBC__==2 && __GLIBC_MINOR__>=1) || __GLIBC__>2
.\" .br
.\" .B #include <sys/sendfile.h>
.\" .br
.\" #else
.\" .br
.\" .B #include <sys/types.h>
.\" .br
.\" .B /* No system prototype before glibc 2.1. */
.\" .br
.\" .BI "ssize_t sendfile(int" " out_fd" ", int" " in_fd" ", off_t *" \
.\"                       offset ", size_t" " count" )
.\" .br
.\" .B #endif
.\"
\fBssize_t sendfile(int\fP\fI out_fd\fP\fB, int\fP\fI in_fd\fP\fB, off_t *\fP\fIoffset\fP\fB,
size_t\fP\fI count\fP\fB);\fP
.SH DESCRIPTION
\fBsendfile\fP() copie des données entre deux descripteurs de fichier. Comme la
copie est assurée à l'intérieur du noyau, \fBsendfile\fP() ne perd pas de temps
à transférer des données entre l'espace noyau et l'espace utilisateur, et
est donc plus efficace que la combinaison \fBread\fP(2)/\fBwrite\fP(2).

\fIin_fd\fP doit être un descripteur de fichier ouvert en lecture, et \fIout_fd\fP
un descripteur ouvert en écriture.

Si \fIoffset\fP n'est pas NULL, c'est un pointeur sur une variable contenant la
tête de lecture (Ndt\ : file offset) à partir de laquelle \fBsendfile\fP()
commencera la lecture dans \fIin_fd\fP. Lorsque \fBsendfile\fP() se termine, la
variable est remplie avec la position de l'octet immédiatement après le
dernier octet lu. Si \fIoffset\fP n'est pas NULL, \fBsendfile\fP() ne modifie pas
la position courante dans le fichier \fIin_fd\fP\ ; autrement, la position
courante de la tête de lecture est ajustée pour refléter le nombre d'octets
lus à partir de \fIin_fd\fP.

L'argument \fIcount\fP est le nombre d'octets à copier entre les descripteurs
de fichiers.

Actuellement (Linux 2.6.9), \fIin_fd\fP doit correspondre à un fichier
supportant les opérations de type \fBmmap\fP(2), et ne peut donc pas être une
socket. En revanche, \fIout_fd\fP doit correspondre à une socket.

Les applications peuvent se rabattre sur \fBread\fP(2)/\fBwrite\fP(2) au cas où
\fBsendfile\fP() échoue avec \fBEINVAL\fP ou \fBENOSYS\fP.
.SH "VALEUR RENVOYÉE"
Si le transfert a réussi, le nombre d'octets écrits dans \fIout_fd\fP est
renvoyé. Sinon, \fBsendfile\fP() renvoie \-1, et \fIerrno\fP est configuré.
.SH ERREURS
.TP 
\fBEAGAIN\fP
L'écriture est non bloquante (attribut \fBO_NONBLOCK\fP du descripteur), et
l'opération devrait bloquer.
.TP 
\fBEBADF\fP
Le fichier d'entrée n'est pas ouvert en lecture, ou celui de sortie en
écriture.
.TP 
\fBEFAULT\fP
Un pointeur se trouve en dehors de l'espace d'adressage.
.TP 
\fBEINVAL\fP
Le descripteur est invalide ou verrouillé, ou une opération de type
\fBmmap\fP(2) n'est pas disponible sur \fIin_fd\fP.
.TP 
\fBEIO\fP
Erreur pendant la lecture depuis \fIin_fd\fP.
.TP 
\fBENOMEM\fP
Mémoire insuffisante pour lire depuis \fIin_fd\fP.
.SH VERSIONS
L'appel système \fBsendfile\fP() est une nouveauté de Linux 2.2. Le fichier
d'en\-tête \fI<sys/sendfile.h>\fP est présent depuis la glibc 2.1.
.SH CONFORMITÉ
Pas spécifié dans POSIX.1\-2001, ni dans d'autres normes.

D'autres systèmes Unix implémentent \fBsendfile\fP() avec d'autres sémantiques,
et d'autres prototypes. Il ne faut pas l'utiliser dans un programme
portable.
.SH NOTES
Si vous voulez utiliser \fBsendfile\fP() pour envoyer un fichier au travers
d'une socket TCP, tout en le précédant de données d'en\-tête, voyez l'option
\fBTCP_CORK\fP de \fBtcp\fP(7) pour minimiser le nombre de paquets, et optimiser
les performances.

Sous Linux 2.4 et précédents, \fIout_fd\fP pouvait correspondre à un fichier
ordinaire, et \fBsendfile\fP() modifiait la position courante dans ce fichier.
.SH "VOIR AUSSI"
\fBmmap\fP(2), \fBopen\fP(2), \fBsocket\fP(2), \fBsplice\fP(2)

.SH COLOPHON
Cette page fait partie de la publication 3.23 du projet \fIman\-pages\fP
Linux. Une description du projet et des instructions pour signaler des
anomalies peuvent être trouvées à l'adresse
<URL:http://www.kernel.org/doc/man\-pages/>.
.SH TRADUCTION
Depuis 2010, cette traduction est maintenue à l'aide de l'outil
po4a <URL:http://po4a.alioth.debian.org/> par l'équipe de
traduction francophone au sein du projet perkamon
<URL:http://alioth.debian.org/projects/perkamon/>.
.PP
Christophe Blaess <URL:http://www.blaess.fr/christophe/> (1996-2003),
Alain Portal <URL:http://manpagesfr.free.fr/> (2003-2006).
Julien Cristau et l'équipe francophone de traduction de Debian\ (2006-2009).
.PP
Veuillez signaler toute erreur de traduction en écrivant à
<perkamon\-l10n\-fr@lists.alioth.debian.org>.
.PP
Vous pouvez toujours avoir accès à la version anglaise de ce document en
utilisant la commande
«\ \fBLC_ALL=C\ man\fR \fI<section>\fR\ \fI<page_de_man>\fR\ ».
