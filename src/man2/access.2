.\" This manpage is Copyright (C) 1992 Drew Eckhardt;
.\"             and Copyright (C) 1993 Michael Haardt, Ian Jackson.
.\" and Copyright (C) 2007 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" %%%LICENSE_START(VERBATIM)
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" %%%LICENSE_END
.\"
.\" Modified 1993-07-21 Rik Faith (faith@cs.unc.edu)
.\" Modified 1994-08-21 by Michael Chastain (mec@shell.portal.com):
.\"   Removed note about old kernel (pre-1.1.44) using wrong id on path.
.\" Modified 1996-03-18 by Martin Schulze (joey@infodrom.north.de):
.\"   Stated more clearly how it behaves with symbolic links.
.\" Added correction due to Nick Duffek (nsd@bbc.com), aeb, 960426
.\" Modified 1996-09-07 by Michael Haardt:
.\"   Restrictions for NFS
.\" Modified 1997-09-09 by Joseph S. Myers <jsm28@cam.ac.uk>
.\" Modified 1998-01-13 by Michael Haardt:
.\"   Using access is often insecure
.\" Modified 2001-10-16 by aeb
.\" Modified 2002-04-23 by Roger Luethi <rl@hellgate.ch>
.\" Modified 2004-06-23 by Michael Kerrisk
.\" 2007-06-10, mtk, various parts rewritten, and added BUGS section.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH ACCESS 2 "16 avril 2013" Linux "Manuel du programmeur Linux"
.SH NOM
access \- Vérifier les permissions d'accès à un fichier de l'utilisateur réel
.SH SYNOPSIS
.nf
\fB#include <unistd.h>\fP
.sp
\fBint access(const char *\fP\fIpathname\fP\fB, int \fP\fImode\fP\fB);\fP
.fi
.SH DESCRIPTION
\fBaccess\fP() vérifie si le processus appelant peut accéder au fichier
\fIpathname\fP. Si \fIpathname\fP est un lien symbolique, il est déréférencé.

.\" F_OK is defined as 0 on every system that I know of.
Le \fImode\fP spécifie les vérifications d'accès à effectuer. Il prend la
valeur \fBF_OK\fP ou un masque contenant un OU binaire d'une des valeurs
\fBR_OK\fP, \fBW_OK\fP et \fBX_OK\fP. \fBF_OK\fP teste l'existence du fichier. \fBR_OK\fP,
\fBW_OK\fP et \fBX_OK\fP testent si le fichier existe et autorise respectivement
la lecture, l'écriture et l'exécution.

Le test est effectué avec les UID et GID \fIréels\fP du processus appelant,
plutôt qu'avec les IDs effectifs qui sont utilisés lorsque l'on tente une
opération (comme \fBopen\fP(2)) sur le fichier. Ceci permet aux programmes
Set\-UID de déterminer les autorisations de l'utilisateur ayant invoqué le
programme.

Si le processus appelant est privilégié (c'est\-à\-dire son UID réel est
zéro), alors une vérification \fBX_OK\fP réussit pour un fichier régulier si
l'exécution est permise pour l'utilisateur propriétaire, le groupe ou pour
les autres.
.SH "VALEUR RENVOYÉE"
En cas de succès (toutes les permissions demandées sont autorisées, ou
\fImode\fP vaut \fBF_OK\fP et le fichier existe), 0 est renvoyé. En cas d'erreur
(au moins une permission de \fImode\fP est interdite, ou \fImode\fP vaut \fBF_OK\fP
et le fichier n'existe pas, ou d'autres erreurs se sont produites), \-1 est
renvoyé et \fIerrno\fP contient le code d'erreur.
.SH ERREURS
\fBaccess\fP() doit échouer si\ :
.TP 
\fBEACCES\fP
L'accès serait refusé au fichier lui\(hymême, ou il n'est pas permis de
parcourir l'un des répertoires du préfixe du chemin de \fIpathname\fP
(consultez aussi \fBpath_resolution\fP(7)).
.TP 
\fBELOOP\fP
Trop de liens symboliques ont été rencontrés en parcourant \fIpathname\fP.
.TP 
\fBENAMETOOLONG\fP
\fIpathname\fP est trop long.
.TP 
\fBENOENT\fP
Un composant du chemin d'accès \fIpathname\fP n'existe pas ou est un lien
symbolique pointant nulle part.
.TP 
\fBENOTDIR\fP
Un élément du chemin d'accès \fIpathname\fP n'est pas un répertoire.
.TP 
\fBEROFS\fP
On demande une écriture sur un système de fichiers en lecture seule.
.PP
\fBaccess\fP() peut échouer si\ :
.TP 
\fBEFAULT\fP
\fIpathname\fP pointe en\(hydehors de l'espace d'adressage accessible.
.TP 
\fBEINVAL\fP
\fImode\fP était mal spécifié.
.TP 
\fBEIO\fP
Une erreur d'entrée\-sortie s'est produite.
.TP 
\fBENOMEM\fP
Pas assez de mémoire pour le noyau.
.TP 
\fBETXTBSY\fP
On a demandé l'écriture dans un fichier exécutable qui est en cours
d'utilisation.
.SH CONFORMITÉ
SVr4, BSD\ 4.3, POSIX.1\-2001.
.SH NOTES
.PP
\fBAttention\fP\ : Utiliser \fBaccess\fP() pour vérifier si un utilisateur a le
droit, par exemple, d'ouvrir un fichier avant d'effectuer réellement
l'ouverture avec \fBopen\fP(2), risque de créer un trou de sécurité. En effet,
l'utilisateur peut exploiter le petit intervalle de temps entre la
vérification et l'accès pour modifier le fichier. \fBPour cette raison,
l'utilisation de cet appel système devrait être évitée\fP (dans cet exemple,
une alternative plus sûre serait de basculer temporairement l'identifiant
effectif de l'utilisateur vers l'identifiant réel et d'appeler \fBopen\fP(2)).
.PP
La fonction \fBaccess\fP() déréférence toujours les liens symboliques. Si vous
avez besoin de vérifier les droits sur un lien symbolique, utilisez
\fBfaccessat\fP(2) avec l'attribut \fBAT_SYMLINK_NOFOLLOW\fP.
.PP
\fBaccess\fP() renvoie une erreur si l'un des types d'accès de \fImode\fP est
refusé, même si d'autres types spécifiés dans \fImode\fP sont autorisés.
.PP
.\" HPU-UX 11 and Tru64 5.1 do this.
Si le processus appelant a les privilèges suffisants (c'est\-à\-dire est
superutilisateur), POSIX.1\-2001 permet à une implémentation d'indiquer un
succès pour \fBX_OK\fP même si le fichier n'a aucun bit d'exécution positionné.
.PP
Un fichier n'est accessible que si les permissions de chacun des répertoires
du préfixe du chemin \fIpathname\fP permet les recherches (c'est\-à\-dire
l'exécution). Si un répertoire est inaccessible, alors l'appel à \fBaccess\fP()
échouera, sans tenir compte des permissions du fichier lui\-même.
.PP
Seuls les bits d'accès sont vérifiés, et non le contenu du fichier. Ainsi,
l'autorisation d'écriture dans un répertoire indique la possibilité d'y
créer des fichiers et non d'y écrire comme dans un fichier. De même, un
fichier DOS peut être considéré comme exécutable, alors que l'appel
\fBexecve\fP(2) échouera évidemment.
.PP
\fBaccess\fP() peut fonctionner incorrectement sur un serveur NFS si les
correspondances d'UID sont activées, car ces correspondances sont gérées par
le serveur, et masquées au client qui effectue les vérifications
d'autorisation. Des problèmes similaires peuvent survenir avec les montages
FUSE.
.SH BOGUES
.\" This behavior appears to have been an implementation accident.
Dans le noyau 2.4 (et auparavant) les tests \fBX_OK\fP sont gérés de façon
bizarre pour le superutilisateur. Si toutes les catégories de permission
d'exécution sont désactivées pour un fichier (n'étant pas un répertoire),
\fBaccess\fP() ne renvoie \-1 que si le \fImode\fP est juste \fBX_OK\fP\ ; si \fBR_OK\fP
ou \fBW_OK\fP est également précisé dans le \fImode\fP, \fBaccess\fP() renvoyait 0
pour ce fichier. Les premier noyaux 2.6 (jusqu'à la version 2.6.3) se
comportaient de la même façon que les noyaux 2.4.

Dans les noyaux antérieurs à 2.6.20, \fBaccess\fP() ignorait l'effet de
l'attribut \fBMS_NOEXEC\fP s'il était utilisé pour monter le système de
fichiers correspondant (avec \fBmount\fP(2)). Depuis Linux 2.6.20, \fBaccess\fP()
prend en compte cet attribut.
.SH "VOIR AUSSI"
\fBchmod\fP(2), \fBchown\fP(2), \fBfaccessat\fP(2), \fBopen\fP(2), \fBsetgid\fP(2),
\fBsetuid\fP(2), \fBstat\fP(2), \fBeuidaccess\fP(3), \fBcredentials\fP(7),
\fBpath_resolution\fP(7)
.SH COLOPHON
Cette page fait partie de la publication 3.52 du projet \fIman\-pages\fP
Linux. Une description du projet et des instructions pour signaler des
anomalies peuvent être trouvées à l'adresse
\%http://www.kernel.org/doc/man\-pages/.
.SH TRADUCTION
Depuis 2010, cette traduction est maintenue à l'aide de l'outil
po4a <http://po4a.alioth.debian.org/> par l'équipe de
traduction francophone au sein du projet perkamon
<http://perkamon.alioth.debian.org/>.
.PP
Christophe Blaess <http://www.blaess.fr/christophe/> (1996-2003),
Alain Portal <http://manpagesfr.free.fr/> (2003-2006).
Julien Cristau et l'équipe francophone de traduction de Debian\ (2006-2009).
.PP
Veuillez signaler toute erreur de traduction en écrivant à
<perkamon\-fr@traduc.org>.
.PP
Vous pouvez toujours avoir accès à la version anglaise de ce document en
utilisant la commande
«\ \fBLC_ALL=C\ man\fR \fI<section>\fR\ \fI<page_de_man>\fR\ ».
