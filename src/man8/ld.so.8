.\" This is in the public domain
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LD.SO 8 "12 janvier 2009" GNU "Manuel du programmeur Linux"
.SH NOM
ld.so, ld\-linux.so* \- Chargeur et éditeur de liens dynamique.
.SH SYNOPSIS
L'éditeur de lien dynamique peut être lançé indirectement en démarrant un
programme lié dynamiquement ou une bibliothèque (dans ce cas, aucune option
en ligne de commande ne peut être transmise, et avec ELF, l'éditeur indiqué
dans la section \fB.interp\fP du programme est exécuté), ou directement en
lançant\ :
.P
\fB/lib/ld\-linux.so.*\fP [OPTIONS] [PROGRAMME [ARGUMENTS]]
.SH DESCRIPTION
Les programmes \fBld.so\fP et \fBld\-linux.so*\fP trouvent et chargent les
bibliothèques partagées nécessaires pour un programme, préparent son
démarrage, et le lancent.
.LP
Les binaires Linux nécessitent une édition de liens dynamique (au démarrage)
sauf si l'option \fB\-static\fP a été indiquée sur la ligne de commande de \fBld\fP
durant la compilation.
.LP
Le programme \fBld.so\fP traite les binaires a.out, un format utilisé il y a
bien longtemps\ ; \fBld\-linux.so*\fP traitent les fichiers ELF
(\fI/lib/ld\-linux.so.1\fP pour libc5, \fI/lib/ld\-linux.so.2\fP pour glibc2), que
tout le monde utilise depuis des années.  Autrement, les deux programmes ont
le même comportement et utilisent les fichiers et programmes \fBldd\fP(1),
\fBldconfig\fP(8)  et \fI/etc/ld.so.conf\fP.
.LP
Les bibliothèques partagées nécessaires à un programme sont recherchées
consécutivement dans les endroits suivants\ :
.IP o 3
(ELF seulement) En utilisant les répertoires indiqués dans l'attribut de
section dynamique DT_RPATH du fichier binaire s'il est présent, et
l'attribut DT_RUNPATH sinon. L'utilisation de DT_RPATH est déconseillée.
.IP o
En utilisant la variable d'environnement \fBLD_LIBRARY_PATH\fP, sauf si les
bits d'emprunt des identifiants d'utilisateur (\fIsetuid\fP) ou de groupe
(\fIsetgid\fP) de l'exécutable sont non nuls (par souci de simplification, on
parlera ci\-dessous d'exécutable \fIsetuid\fP ou \fIsetgid\fP), auquel cas elle est
ignorée.
.IP o
(ELF seulement) En utilisant les répertoires indiqués dans l'attribut de
section dynamique DT_RUNPATH du fichier binaire s'il est présent.
.IP o
Depuis le fichier cache \fI/etc/ld.so.cache\fP qui contient une liste compilée
de bibliothèques précédemment trouvées dans des chemins par défaut. Si
toutefois le fichier binaire a été lié avec l'option \fB\-z nodeflib\fP de
l'éditeur de liens, les chemins par défaut sont ignorés.
.IP o
Dans le répertoire par défaut \fI/lib\fP, puis \fI/usr/lib\fP. Si le binaire a été
lié avec l'option \fB\-z nodeflib\fP de l'éditeur de lien, cette étape est
sautée.
.SS "$ORIGIN et rpath"
.PP
.\" ld.so also understands $LIB, with the same meaning as $ORIGIN/lib,
.\" it appears.
.\"
.\" There is also $PLATFORM.  This is a kind of wildcard
.\" of directories related at AT_HWCAP.  To get an idea of the
.\" places that $PLATFORM would match, look at the output of the
.\" following:
.\"
.\" mkdir /tmp/d
.\" LD_LIBRARY_PATH=/tmp/d strace -e open /bin/date 2>&1 | grep /tmp/d
.\"
.\" ld.so lets names be abbreviated, so $O will work for $ORIGIN;
.\" Don't do this!!
\fBld.so\fP comprend la chaîne \fI$ORIGIN\fP (ou de manière équivalente
\fI${ORIGIN}\fP) dans une spécification rpath (DT_RPATH ou DT_RUNPATH) comme
indiquant le répertoire contenant l'exécutable de l'application. Ainsi, une
application située dans \fIun_répertoire/app\fP peut être compilée avec \fIgcc
\-Wl,\-rpath,\(aq$ORIGIN/../lib\(aq\fP de sorte qu'elle trouvera un bibliothèque
partagée associée dans \fIun_répertoire/lib\fP où que soit situé
\fIun_répertoire\fP dans la hiérarchie du répertoire. Cela facilite la création
d'applications «\ prêtes à l'emploi\ » qui n'ont pas besoin d'être
installées dans un répertoire particulier mais peuvent au contraire être
installées dans n'importe quel répertoire et toujours trouver leurs propres
bibliothèques partagées.
.SH OPTIONS
.TP 
\fB\-\-list\fP
Liste les dépendances et leurs résolutions.
.TP 
\fB\-\-verify\fP
Vérifie que le programme est lié dynamiquement et que l'éditeur de liens
peut le traiter.
.TP 
\fB\-\-library\-path CHEMIN\fP
Surcharge la variable d'environnement \fBLD_LIBRARY_PATH\fP (voir plus bas).
.TP 
\fB\-\-inhibit\-rpath LISTE\fP
Ignorer les informations RPATH et RUNPATH dans les objets de la LISTE. Cette
option est ignorée si \fBld.so\fP est \fIsetuid\fP ou \fIsetgid\fP.
.SH ENVIRONNEMENT
Il y a quatre variables d'environnement importantes.
.TP 
\fBLD_BIND_NOW\fP
(libc5\ ; glibc depuis 2.1.1) Si la chaîne est non vide, l'éditeur de lien
résoudra tous les symboles au démarrage du programme plutôt que repousser la
résolution des noms de fonctions au moment où elles sont référencées en
premier. Ceci est utile dans un débogueur.
.TP 
\fBLD_LIBRARY_PATH\fP
Comme la variable d'environnement \fBPATH\fP, cette variable contient une liste
de répertoires séparés par des deux\-points. Les bibliothèques au format ELF
sont recherchées à l'exécution dans ces répertoires.
.TP 
\fBLD_PRELOAD\fP
Une liste, séparée par des espaces, de bibliothèques ELF spécifiques à
l'utilisateur, à charger avant les autres bibliothèques. Ceci permet de
surcharger sélectivement les fonctions des autres bibliothèques
partagées. Pour les binaires ELF \fIsetuid\fP ou \fIsetgid\fP, seules les
bibliothèques \fIsetuid\fP des répertoires standard seront chargées.
.TP 
\fBLD_TRACE_LOADED_OBJECTS\fP
(ELF seulement) Si la chaîne est non vide, le programme liste ses
dépendances dynamiques comme s'il était lancé par \fBldd\fP(1), au lieu du
lancement normal.
.LP
Il existe de nombreuses autres variables plus ou moins obscures, certaines
obsolètes, ou réservées pour un usage interne.
.TP 
\fBLD_AOUT_LIBRARY_PATH\fP
(libc5) Version de \fBLD_LIBRARY_PATH\fP pour les binaire a.out seulement. Les
anciennes versions de ld\-linux.so.1 supportent \fBLD_ELF_LIBRARY_PATH\fP.
.TP 
\fBLD_AOUT_PRELOAD\fP
(libc5) Version de \fBLD_PRELOAD\fP pour les binaires a.out seulement. Les
anciennes versions de ld\-linux.so.1 supportent \fBLD_ELF_PRELOAD\fP.
.TP 
\fBLD_AUDIT\fP
(glibc depuis 2.4) Une liste d'objets partagés ELF spécifiés par
l'utilisateur à charger avant tous les autres à l'intérieur d'un espace de
nommage de l'éditeur de liens séparé (c'est\-à\-dire qu'il n'y aura pas
d'interférence avec les liaisons sur les symboles normaux qui auront lieu
pendant le processus). Ces bibliothèques peuvent être utilisées pour auditer
les opérations effectuées par l'éditeur de liens dynamique. \fBLD_AUDIT\fP est
ignorée pour les exécutables \fIsetuid\fP ou \fIsetgid\fP.

L'éditeur de liens dynamique notifiera les bibliothèques d'audit à des
endroits précis d'audit (appelés \fIauditing checkpoints\fP)\ \(em\ par exemple
au chargement d'une nouvelle bibliothèque, à la résolution d'un symbole, à
l'appel d'un symbole depuis un autre objet partagé \ \(em\ en appelant la
fonction adéquate de la bibliothèque d'audit. Pour des informmations plus
détaillées, voir \fBrtld\-audit\fP(7). L'interface d'audit est largement
compatible avec celle disponible sur Solaris, décrite dans le \fILinker and
Libraries Guide\fP, au chapitre \fIRuntime Linker Auditing Interface\fP.
.TP 
\fBLD_BIND_NOT\fP
(glibc depuis 2.1.95) Ne pas mettre à jour les tables GOT (\fIglobal offset
table\fP) et PLT (\fIprocedure linkage table\fP) après résolution d'un symbole.
.TP 
\fBLD_DEBUG\fP
(glibc depuis 2.1) Afficher de nombreuses informations de débogage de
l'éditeur dynamique. Si elle contient \fBall\fP, afficher tous les messages
d'information, si elle contient \fBhelp\fP, afficher un message d'aide à propos
des catégories de messages pour cette variable d'environnement. Depuis glibc
2.3.4, \fBLD_DEBUG\fP n'est pas pris en compte pour les exécutables \fIsetuid\fP
ou \fIsetgid\fP.
.TP 
\fBLD_DEBUG_OUTPUT\fP
(glibc depuis 2.1) Fichier où la sortie de \fBLD_DEBUG\fP devrait être
envoyée. Par défaut, c'est la sortie standard. \fBLD_DEBUG_OUTPUT\fP est
ignorée pour les exécutables \fIsetuid\fP ou \fIsetgid\fP.
.TP 
\fBLD_DYNAMIC_WEAK\fP
(glibc depuis 2.1.91) Autorise la surcharge des symboles faibles (retour à
l'ancien comportement). Pour des raisons de sécurité, depuis glibc 2.3.4,
\fBLD_DYNAMIC_WEAK\fP est ignorée pour les exécutables \fIsetuid\fP ou \fIsetgid\fP.
.TP 
\fBLD_HWCAP_MASK\fP
(glibc depuis 2.1)  Masque des capacités matérielles.
.TP 
\fBLD_KEEPDIR\fP
(a.out seulement)(libc5) Ne pas ignorer le répertoire dans les noms de
bibliothèques a.out. Cette option est très déconseillée.
.TP 
\fBLD_NOWARN\fP
(a.out seulement)(libc5) Supprimer les avertissements à propos des
bibliothèques a.out incompatibles avec les versions antérieures.
.TP 
\fBLD_ORIGIN_PATH\fP
.\" Only used if $ORIGIN can't be determined by normal means
.\" (from the origin path saved at load time, or from /proc/self/exe)?
(glibc depuis 2.1) Chemin où se trouve l'exécutable (pour des programmes non
\fIsetuid\fP). Pour des raisons de sécurité, depuis glibc 2.4,
\fBLD_ORIGIN_PATH\fP est ignorée pour les exécutables \fIsetuid\fP ou \fIsetgid\fP.
.TP 
\fBLD_POINTER_GUARD\fP
(glibc depuis 2.4) Mettre à 0 pour supprimer la protection sur les
pointeurs. Toute autre valeur active cette protection, ce qui est le
comportement par défaut. La protection sur les pointeurs est un mécanisme de
sécurité où certains pointeurs vers du code stocké dans la zone mémoire
accessible en écriture (comme les adresses de retour conservées par
\fBsetjmp\fP(3), ou des pointeurs de fonctions utilisés par diverses fonctions
internes de glibc) sont modifiés semi\-aléatoirement pour rendre plus
difficile une utilisation malveillante par un intrus, qui utiliserait par
exemple un dépassement de tampon ou de la pile.
.TP 
\fBLD_PROFILE\fP
(glibc depuis 2.1) Objet partagé à profiler, spécifié par un chemin ou par
un nom d'objet partagé (\fIsoname\fP). Le résultat du profilage est écrit dans
un fichier dont le nom est «\ \fI$LD_PROFILE_OUTPUT\fP/\fI$LD_PROFILE\fP.profile\ ».
.TP 
\fBLD_PROFILE_OUTPUT\fP
(glibc depuis 2.1) Répertoire où sera écrit le résultat de \fBLD_PROFILE\fP. Si
cette variable n'est pas définie, ou si elle est définie à une valeur vide,
le défaut est \fI/var/tmp\fP. \fBLD_PROFILE_OUTPUT\fP est ignorée pour les
exécutables \fIsetuid\fP ou \fIsetgid\fP, auquel cas le répertoire utilisé sera
toujours \fI/var/profile\fP.
.TP 
\fBLD_SHOW_AUXV\fP
.\" FIXME
.\" Document LD_TRACE_PRELINKING (e.g.: LD_TRACE_PRELINKING=libx1.so ./prog)
.\" Since glibc 2.3
.\" Also enables DL_DEBUG_PRELINK
(glibc depuis 2.1) Affiche les tableaux auxiliaires passés depuis le
kernel. Pour des raisons de sécurité, depuis glibc 2.3.5, \fBLD_SHOW_AUXV\fP
est ignorée pour les exécutables \fIsetuid\fP ou \fIsetgid\fP.
.TP 
\fBLD_USE_LOAD_BIAS\fP
.\" http://sources.redhat.com/ml/libc-hacker/2003-11/msg00127.html
.\" Subject: [PATCH] Support LD_USE_LOAD_BIAS
.\" Jakub Jelinek
Par défaut, c'est\-à\-dire si cette variable n'est pas définie, les
exécutables et les objets partagés préchargés (\fIprelink\fP) respectent
l'adresse de base des bibliothèques dont ils dépendent, alors que les
exécutables PIE (\fIposition\-independent executables\fP) non préchargés et les
autres objets partagés ne les respectent pas. Si \fBLD_USE_LOAD_BIAS\fP est
définie à une valeur non nulle, les exécutables et les PIE vont respecter
les adresses de base. Si \fBLD_USE_LOAD_BIAS\fP est définie à 0, ni les
exécutables, ni les PIE ne respecteront les adresses de base. Cette variable
est ignorée pour les exécutables \fIsetuid\fP ou \fIsetgid\fP.
.TP 
\fBLD_VERBOSE\fP
(glibc depuis 2.1) S'il s'agit d'une chaîne non vide, afficher les
informations sur la version des objets sur lesquels on demande des
informations sur le programme (si \fBLD_TRACE_LOADED_OBJECTS\fP a été
configuré, ou si les options \fB\-\-list\fP ou \fB\-\-verify\fP ont été données à
l'éditeur de liens dynamiques).
.TP 
\fBLD_WARN\fP
(ELF seulement)(glibc depuis 2.1.3) Si la chaîne est non vide, avertir si un
symbole n'est pas résolu.
.TP 
\fBLDD_ARGV0\fP
(libc5) \fIargv\fP[0] à utiliser par \fBldd\fP(1) si aucun n'est présent.
.SH FICHIERS
.PD 0
.TP 
\fI/lib/ld.so\fP
le chargeur/éditeur de liens dynamique a.out.
.TP 
\fI/lib/ld\-linux.so.\fP{\fI1\fP,\fI2\fP}
Le chargeur/éditeur de liens dynamique ELF.
.TP 
\fI/etc/ld.so.cache\fP
Fichier contenant la liste compilée des répertoires où se trouvent des
bibliothèques, ainsi qu'une liste ordonnée de bibliothèques candidates.
.TP 
\fI/etc/ld.so.preload\fP
Fichier contenant une liste de bibliothèques ELF, séparées par des espaces,
à charger avant de démarrer le programme.
.TP 
\fIlib*.so*\fP
Bibliothèques partagées.
.PD
.SH NOTES
Les fonctionnalités \fBld.so\fP sont disponibles pour les exécutables compilés
à partir de la libc version 4.4.3 et ultérieures. Les fonctionnalités ELF
sont disponibles depuis 1.1.52 et la libc5.
.SH "VOIR AUSSI"
.\" .SH AUTHORS
.\" ld.so: David Engel, Eric Youngdale, Peter MacDonald, Hongjiu Lu, Linus
.\"  Torvalds, Lars Wirzenius and Mitch D'Souza
.\" ld-linux.so: Roland McGrath, Ulrich Drepper and others.
.\"
.\" In the above, (libc5) stands for David Engel's ld.so/ld-linux.so.
\fBldd\fP(1), \fBrtld\-audit\fP(7), \fBldconfig\fP(8)
.SH COLOPHON
Cette page fait partie de la publication 3.23 du projet \fIman\-pages\fP
Linux. Une description du projet et des instructions pour signaler des
anomalies peuvent être trouvées à l'adresse
<URL:http://www.kernel.org/doc/man\-pages/>.
.SH TRADUCTION
Depuis 2010, cette traduction est maintenue à l'aide de l'outil
po4a <URL:http://po4a.alioth.debian.org/> par l'équipe de
traduction francophone au sein du projet perkamon
<URL:http://alioth.debian.org/projects/perkamon/>.
.PP
Christophe Blaess <URL:http://www.blaess.fr/christophe/> (2003-2008).
.PP
Veuillez signaler toute erreur de traduction en écrivant à
<perkamon\-l10n\-fr@lists.alioth.debian.org>.
.PP
Vous pouvez toujours avoir accès à la version anglaise de ce document en
utilisant la commande
«\ \fBLC_ALL=C\ man\fR \fI<section>\fR\ \fI<page_de_man>\fR\ ».
